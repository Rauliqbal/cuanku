generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts     Account[]
  categories   Category[]
  transactions Transaction[]
  tags         Tag[]
  budgets      Budget[]

  @@map("user")
}

model Account {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  type      String?
  currency  String   @default("IDR")
  balance   BigInt   @default(0)
  note      String?
  createdAt DateTime @default(now())

  transactions Transaction[]

  @@map("account")
}

model Category {
  id       String       @id @default(uuid())
  userId   String
  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  name     String
  type     CategoryType
  parentId String?
  parent   Category?    @relation("CategoryToParent", fields: [parentId], references: [id])
  children Category[]   @relation("CategoryToParent")

  createdAt DateTime @default(now())

  transactions Transaction[]
  budgets      Budget[]

  @@map("category")
}

enum CategoryType {
  income
  expense
}

model Transaction {
  id           String       @id @default(uuid())
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId    String?
  account      Account?     @relation(fields: [accountId], references: [id], onDelete: SetNull)
  categoryId   String?
  category     Category?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  amount       BigInt
  currency     String       @default("IDR")
  type         CategoryType
  description  String?
  occurredAt   DateTime
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  isReconciled Boolean      @default(false)

  tags TransactionTag[]

  @@map("transaction")
}

model Tag {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  createdAt DateTime @default(now())

  transactions TransactionTag[]

  @@map("tag")
}

model TransactionTag {
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  tagId         String
  tag           Tag         @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([transactionId, tagId])
  @@map("transaction_tag")
}

model Budget {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  year       Int
  month      Int
  amount     BigInt
  createdAt  DateTime @default(now())

  @@unique([userId, categoryId, year, month])
  @@map("budget")
}
